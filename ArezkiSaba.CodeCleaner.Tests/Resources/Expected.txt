using ArezkiSaba.CodeCleaner.Tests;
using System;

namespace ArezkiSaba.CodeCleaner.Tests;

public partial class TestClass1<T>
{
    private static string _someStaticField;
    private readonly string _readonlyStringField1;
    private readonly string _readonlyStringField2;
    private int _canDoSomething;
    private string _nonReadonlyStringField;

    public event EventHandler SomeEventTriggered;
    public event EventHandler SomeOtherEventCamelCasedTriggered;

    public bool CanDoSomeOtherThing { get; set; }

    public int CanDoSomething
    {
        get { return _canDoSomething; }
        set { _canDoSomething = value; }
    }

    public TestClass1()
    {
        _readonlyStringField1 = "some useless value";
        _readonlyStringField2 = "some useless value";
        _nonReadonlyStringField = "some other useless value";
    }

    public TestClass1(
         string arg1)
    {
        _readonlyStringField1 = arg1;
        _readonlyStringField2 = arg1;
        _nonReadonlyStringField = "some other useless value";
    }

    private TestClass1()
    {
    }

    public static TestClass1 SomePublicFactoryMethod()
    {
        return new TestClass1();
    }

    public async Task HandleOnSomeEventCallbackAsync(
         string variable1,
         string variable2,
         string variable3,
         string variable4)
    {
        var someVariableWithBadNamingConvention = "Hi";
        var someOtherVariableWithBadNamingConvention = "there !";
        _nonReadonlyStringField = "some other useless value";

        Console.WriteLine($"{someVariableWithBadNamingConvention} {someOtherVariableWithBadNamingConvention}");
    }

    public void OnSomeEventCallback(
         object _,
         EventArgs __)
    {
        var variable1 = "1";
        var variable2 = "2";
        var variable3 = "3";
        var variable4 = "4";

        HandleOnSomeEventCallbackAsync(
            variable1,
            variable2,
            variable3,
            variable4
        );
    }

    public Task SomeAsyncMethodAsync()
    {
        return Task.CompletedTask;
    }

    public Task SomeAsyncMethodWithSuffixAsync()
    {
        return Task.CompletedTask;
    }

    private void SomePrivateMethod()
    {
    }

    private static void SomePrivateStaticMethod()
    {
    }
}