using System;
using System.Drawing;
using Windows;
using Windows.Storage;
using ArezkiSaba.CodeCleaner;
using ArezkiSaba.CodeCleaner.Tests;
using static System.Math;
using NativeHttpClient = System.Net.Http.HttpClient;

namespace ArezkiSaba.CodeCleaner.Tests;

public class TestClass1<T>
{
    private const string SomeConstField = "SOME CONST VALUE";
    private static string SomeStaticField;
    private readonly string _readonlyStringField1;
    private readonly string _readonlyStringField2;
    private bool _nonReadonlyBooleanField;

    public event EventHandler SomeEventTriggered;
    public event EventHandler SomeOtherEventCamelCasedTriggered;

    public bool CanDoSomeOtherThing { get; set; }

    private bool _canDoSomething;
    public bool CanDoSomething
    {
        get { return _canDoSomething; }
        set { _canDoSomething = value; }
    }

    private bool _canDoSomethingElse;
    public bool CanDoSomethingElse
    {
        get { return _canDoSomethingElse; }
        set { _canDoSomethingElse = value; }
    }

    private TestClass1()
    {
        _readonlyStringField1 = "some useless value";
        _readonlyStringField2 = "some useless value";
        _nonReadonlyBooleanField = false;
    }

    public TestClass1(
        string arg1,
        string arg2)
    {
        _readonlyStringField1 = arg1;
        _readonlyStringField2 = arg2;
        _nonReadonlyBooleanField = true;
    }

    public static TestClass1 SomePublicFactoryMethod()
    {
        return new TestClass1();
    }

    public async Task HandleOnSomeEventCallbackAsync(
        string variable1,
        string variable2,
        string variable3,
        string variable4)
    {
        var someVariableWithBadNamingConvention = "Hi";
        var someOtherVariableWithBadNamingConvention = "there";

        Console.WriteLine(
            $"{someVariableWithBadNamingConvention} {someOtherVariableWithBadNamingConvention} !"
        );

        _nonReadonlyBooleanField = true;

        if (_nonReadonlyBooleanField)
        {
            Console.WriteLine(
                $"{someVariableWithBadNamingConvention} {someOtherVariableWithBadNamingConvention} again !"
            );
        }
    }

    public void OnSomeEventCallback(
        object _,
        EventArgs __)
    {
        var variable1 = "1";
        var variable2 = "2";
        var variable3 = "3";
        var variable4 = "4";

        HandleOnSomeEventCallbackAsync(
            variable1: variable1,
            variable2: variable2,
            variable3: variable3,
            variable4: variable4
        );

        MapControllerRoute(a: "1", b: "2");
    }

    public Task SomeAsyncMethodAsync()
    {
        return Task.CompletedTask;
    }

    public Task SomeAsyncMethodWithSuffixAsync()
    {
        return Task.CompletedTask;
    }

    #region "Private use"

    private void MapControllerRoute(
        string a,
        string b)
    {
    }

    private void SomePrivateMethod()
    {
    }

    private static void SomePrivateStaticMethod()
    {
    }

    #endregion

    public sealed class InternalClass1
    {
        private readonly string _readonlyStringField;
    }
}

public sealed class TestClass2 : TestClass1<int>
{
    public TestClass2(
        int variable1,
        int variable2)
        : this(variable1, variable2)
    {
        var variable1 = Method1(
            Method1(
                "2222222222222222222222222222222",
                "2222222222222222222222222222222",
                "2222222222222222222222222222222",
                "2222222222222222222222222222222"
            ),
            "1111111111111111111111111111111111111",
            Method1(
                "3333333333333333333333333333333",
                Method1(
                    "4444444444444444444444444444444",
                    "4444444444444444444444444444444",
                    "4444444444444444444444444444444",
                    "4444444444444444444444444444444"
                ),
                "3333333333333333333333333333333",
                "3333333333333333333333333333333"
            ),
            "1111111111111111111111111111111111111"
        );
    }

    private TestClass2(
        int variable1,
        int variable2)
        : base()
    {
        var items = new[]
        {
            "1",
            "2",
            "3"
        };
    }

    public string Method1(
        string parameter1,
        string parameter2,
        string parameter3,
        string parameter4)
    {
        return null;
    }
}