using ArezkiSaba.CodeCleaner.Extensions;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Formatting;
using Microsoft.CodeAnalysis.MSBuild;

namespace ArezkiSaba.CodeCleaner;

public sealed class CodeCleanerService
{
    private readonly string _sourceCodeLocation;

    public CodeCleanerService(
        string sourceCodeLocation)
    {
        _sourceCodeLocation = sourceCodeLocation;

        Console.ForegroundColor = ConsoleColor.White;
        MSBuildLocator.RegisterDefaults();
    }

    public async Task StartAsync()
    {
        Console.ForegroundColor = ConsoleColor.White;
        Console.WriteLine($"[{nameof(CodeCleanerService)}] Workspace initialization...");

        using var workspace = MSBuildWorkspace.Create();
        workspace.LoadMetadataForReferencedProjects = true;
        workspace.WorkspaceFailed += (_, e) =>
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"[{nameof(MSBuildWorkspace)}] {e.Diagnostic.Message}");
            Console.ResetColor();
        };
        Console.WriteLine($"[{nameof(CodeCleanerService)}] Workspace initialization done.");

        Console.ForegroundColor = ConsoleColor.White;
        Console.WriteLine($"[{nameof(CodeCleanerService)}] Solution scan...");
        var files = Directory.GetDirectories(_sourceCodeLocation);
        Console.WriteLine($"[{nameof(CodeCleanerService)}] Solution scan done.");

        foreach (var file in files)
        {
            var slnFiles = Directory.GetFiles(file, "*.sln");
            foreach (var slnFile in slnFiles)
            {
                Console.WriteLine($"[{nameof(CodeCleanerService)}] Solution opening ({new FileInfo(slnFile).Name})...");
                var solution = await workspace.OpenSolutionAsync(slnFile);
                Console.WriteLine($"[{nameof(CodeCleanerService)}] Solution opening done.");

                Console.WriteLine($"[{nameof(CodeCleanerService)}] Solution formatting...");
                await FormatAsync(workspace);
                Console.WriteLine($"[{nameof(CodeCleanerService)}] Solution formatting done.");
            }
        }
    }

    #region Private use

    private static async Task FormatAsync(
        MSBuildWorkspace workspace)
    {
        var changesCount = 0;
        var newSolution = workspace.CurrentSolution;
        var projectIds = workspace.CurrentSolution.ProjectIds;

        foreach (var projectId in projectIds)
        {
            var project = newSolution.GetProject(projectId);
            ////var compilation = await project.GetCompilationAsync();
            ////if (compilation is null)
            ////{
            ////    continue;
            ////}

            var documentIds = project.DocumentIds;
            foreach (var documentId in documentIds)
            {
                var originalDocument = project.GetDocument(documentId);
                var originalRoot = await originalDocument.GetSyntaxRootAsync();

                if (originalDocument.IsAutoGenerated() || originalRoot.BeginsWithAutoGeneratedComment())
                {
                    continue;
                }

                var updatedDocument = await originalDocument.StartDuplicatedUsingDirectivesRemoverAsync();
                updatedDocument = await updatedDocument.StartUsingDirectivesSorterAsync();
                updatedDocument = await updatedDocument.StartDuplicatedEmptyLinesRemoverAsync();
                updatedDocument = await updatedDocument.StartMethodDeclarationParameterLineBreakerAsync();
                updatedDocument = await updatedDocument.StartInvocationExpressionArgumentLineBreakerAsync();
                updatedDocument = await updatedDocument.StartUnusedMethodParameterDiscarderAsync(newSolution);
                updatedDocument = await Formatter.FormatAsync(updatedDocument);

                project = updatedDocument.Project;
                newSolution = project.Solution;

                var originalText = (await originalDocument.GetTextAsync()).ToString();
                var updatedText = (await updatedDocument.GetTextAsync()).ToString();
                if (!originalText.Equals(updatedText))
                {
                    changesCount++;
                }
            }
        }

        ApplyChanges(workspace, newSolution, nameof(StartAsync), changesCount);
    }

    private static void ApplyChanges(
        MSBuildWorkspace workspace,
        Solution newSolution,
        string moduleName,
        int changesCount)
    {
        if (!ReferenceEquals(newSolution, workspace.CurrentSolution) &&
            workspace.TryApplyChanges(newSolution))
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"[{moduleName}] {new FileInfo(newSolution.FilePath).Name} => Changes applied in {changesCount} files");
        }
        else
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"[{moduleName}] {new FileInfo(newSolution.FilePath).Name} => No changes applied");
        }

        Console.ResetColor();
    }

    #endregion
}
