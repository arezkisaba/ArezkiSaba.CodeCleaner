using ArezkiSaba.CodeCleaner.Models;
using Microsoft.CodeAnalysis;

namespace ArezkiSaba.CodeCleaner.Extensions;

public static class WorkspaceExtensions
{
    public static async Task<Workspace> RefactorAsync(
        this Workspace workspace)
    {
        var funcs = new List<(Func<Document, Solution, Task<RefactorOperationResult>> func, Func<Project, Task<bool>> predicate)>
        {
            ((document, solution) => document.StartRegionRemoverAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartTypeInferenceRewriterAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartReadonlyModifierFieldRewriterAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartSealedModifierClassRewriterAsync(solution), async (project) => await project.IsNonNugetProjectAsync()),
            ((document, solution) => document.StartDuplicatedEmptyLinesRemoverAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.ReorderClassMembersAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.ReorderFieldsWithPropfullPropertiesAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartUsingDirectiveSorterAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartDuplicatedUsingDirectiveRemoverAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartEmptyLinesBracesRemoverAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartRegionInserterAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartMethodDeclarationParameterLineBreakerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartExpressionArgumentLineBreakerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartFieldRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartEventFieldRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartPropertyRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartMethodRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartLocalVariableRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartParameterRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartUnusedMethodParameterRenamerAsync(solution), (project) => Task.FromResult(true)),
            ((document, solution) => document.StartAsyncMethodRenamerAsync(solution), (project) => Task.FromResult(true)),
            




            ////((document, solution) => document.FormatAsync(solution), (project) => Task.FromResult(true))
        };

        var currentSolution = workspace.CurrentSolution;
        foreach (var projectId in workspace.CurrentSolution.ProjectIds)
        {
            var currentProject = currentSolution.GetProject(projectId);
            foreach (var documentId in currentProject.DocumentIds)
            {
                var currentDocument = currentProject.GetDocument(documentId);
                var rootToUpdate = await currentDocument.GetSyntaxRootAsync();
                if (currentDocument.IsAutoGenerated() || rootToUpdate.BeginsWithAutoGeneratedComment())
                {
                    continue;
                }

                foreach (var (func, predicate) in funcs)
                {
                    var canExecuteFunc = await predicate(currentProject);
                    if (!canExecuteFunc)
                    {
                        continue;
                    }

                    var result = await func(currentDocument, currentSolution);
                    currentDocument = result.Document;
                    currentProject = result.Project;
                    currentSolution = result.Solution;
                }
            }
        }

        ApplyChanges(workspace, currentSolution);
        return workspace;
    }

    #region Private use

    private static void ApplyChanges(
        this Workspace workspace,
        Solution newSolution)
    {
        if (!ReferenceEquals(newSolution, workspace.CurrentSolution))
        {
            var changesApplied = workspace.TryApplyChanges(newSolution);
            if (changesApplied)
            {
            }
            else
            {
            }
        }
    }

    #endregion
}
