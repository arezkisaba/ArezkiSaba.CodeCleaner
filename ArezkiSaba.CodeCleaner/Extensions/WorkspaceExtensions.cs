using ArezkiSaba.CodeCleaner.Features;
using ArezkiSaba.CodeCleaner.Models;
using Microsoft.CodeAnalysis;

namespace ArezkiSaba.CodeCleaner.Extensions;

public static class WorkspaceExtensions
{
    public static async Task<Workspace> RefactorAsync(
        this Workspace workspace)
    {
        var funcs = new List<(Func<Document, Solution, Task<RefactorOperationResult>> func, Func<Project, Task<bool>> predicate)>
        {
            ((document, solution) => new DeleteRegions().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new ApplyTypeInference().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new AddReadonlyModifierOnFields().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new AddSealedModifierOnClasses().StartAsync(document, solution), async (project) => await project.IsNonNugetProjectAsync()),
            ((document, solution) => new DeleteDuplicatedEmptyLines().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new SortClassMembers().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new SortFieldsWithPropfullProperties().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new SortUsingDirectives().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new DeleteDuplicatedUsingDirectives().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new DeleteEmptyLinesAroundBraces().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new AddPrivateUseRegion().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ////((document, solution) => new FormatSimpleMemberExpressions().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new FormatExpressionsOnInitializers().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new FormatArgumentsOnExpressions().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new FormatExpressionsOnAnonymousObjectCreation().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new FormatParametersOnDeclarations().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameFields().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameEventFields().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameProperties().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameMethods().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameLocalVariables().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameParameters().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameUnusedMethodParameters().StartAsync(document, solution), (project) => Task.FromResult(true)),
            ((document, solution) => new RenameAsyncMethod().StartAsync(document, solution), (project) => Task.FromResult(true)),
            




            ////((document, solution) => document.FormatAsync(solution), (project) => Task.FromResult(true))
        };

        var currentSolution = workspace.CurrentSolution;
        foreach (var projectId in workspace.CurrentSolution.ProjectIds)
        {
            var currentProject = currentSolution.GetProject(projectId);
            foreach (var documentId in currentProject.DocumentIds)
            {
                var currentDocument = currentProject.GetDocument(documentId);
                var rootToUpdate = await currentDocument.GetSyntaxRootAsync();
                if (currentDocument.IsAutoGenerated() || rootToUpdate.BeginsWithAutoGeneratedComment())
                {
                    continue;
                }

                foreach (var (func, predicate) in funcs)
                {
                    var canExecuteFunc = await predicate(currentProject);
                    if (!canExecuteFunc)
                    {
                        continue;
                    }

                    var result = await func(currentDocument, currentSolution);
                    currentDocument = result.Document;
                    currentProject = result.Project;
                    currentSolution = result.Solution;
                }
            }
        }

        ApplyChanges(workspace, currentSolution);
        return workspace;
    }

    #region Private use

    private static void ApplyChanges(
        this Workspace workspace,
        Solution newSolution)
    {
        if (!ReferenceEquals(newSolution, workspace.CurrentSolution))
        {
            var changesApplied = workspace.TryApplyChanges(newSolution);
            if (changesApplied)
            {
            }
            else
            {
            }
        }
    }

    #endregion
}
