using Microsoft.CodeAnalysis;

namespace ArezkiSaba.CodeCleaner.Extensions;

public static class WorkspaceExtensions
{
    public static async Task<Workspace> CleanAndRefactorAsync(
        this Workspace workspace)
    {
        await workspace.CleanAsync();
        return workspace;
    }

    #region Private use

    private static async Task CleanAsync(
        this Workspace workspace)
    {
        var funcs = new List<(Func<Document, Solution, Task<(Document, Solution)>> func, Func<Project, Task<bool>> predicate)>();
        funcs.Add(((document, solution) => document.StartReadonlyModifierFieldRewriterAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartSealedModifierClassRewriterAsync(solution), async (project) => await project.IsNonNugetProjectAsync()));
        funcs.Add(((document, solution) => document.ReorderClassMembersAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.ReorderFieldsWithPropfullPropertiesAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartTypeInferenceRewriterAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartUsingDirectiveSorterAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartDuplicatedUsingDirectiveRemoverAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartDuplicatedEmptyLinesRemoverAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartEmptyLinesBracesRemoverAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartRegionInserterAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartMethodDeclarationParameterLineBreakerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartInvocationExpressionArgumentLineBreakerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartFieldRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartEventFieldRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartPropertyRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartMethodRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartLocalVariableRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartParameterRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartUnusedMethodParameterRenamerAsync(solution), (project) => Task.FromResult(true)));
        funcs.Add(((document, solution) => document.StartAsyncMethodRenamerAsync(solution), (project) => Task.FromResult(true)));

        var newSolution = workspace.CurrentSolution;
        foreach (var projectId in workspace.CurrentSolution.ProjectIds)
        {
            var project = newSolution.GetProject(projectId);
            foreach (var documentId in project.DocumentIds)
            {
                var documentToUpdate = project.GetDocument(documentId);
                var rootToUpdate = await documentToUpdate.GetSyntaxRootAsync();
                if (documentToUpdate.IsAutoGenerated() || rootToUpdate.BeginsWithAutoGeneratedComment())
                {
                    continue;
                }

                foreach (var (func, predicate) in funcs)
                {
                    var canExecuteFunc = await predicate(project);
                    if (!canExecuteFunc)
                    {
                        continue;
                    }

                    (documentToUpdate, newSolution) = await func(documentToUpdate, newSolution);
                }
            }
        }

        ApplyChanges(workspace, newSolution);
    }

    private static void ApplyChanges(
        this Workspace workspace,
        Solution newSolution)
    {
        if (!ReferenceEquals(newSolution, workspace.CurrentSolution))
        {
            var changesApplied = workspace.TryApplyChanges(newSolution);
            if (changesApplied)
            {
            }
            else
            {
            }
        }
    }

    #endregion
}
