using ArezkiSaba.CodeCleaner.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Editing;
using Microsoft.CodeAnalysis.Formatting;

namespace ArezkiSaba.CodeCleaner.Extensions;

public static class DocumentExtensions
{
    public static async Task<RefactorOperationResult> FormatAsync(
        this Document document,
        Solution solution)
    {
        document = await Formatter.FormatAsync(document);
        return new RefactorOperationResult(
            document,
            document.Project,
            document.Project.Solution
        );
    }

    public static bool IsAutoGenerated(
        this Document document)
    {
        var isFilePathAutoGenerated =
            document.FilePath?.Contains(".nuget", StringComparison.OrdinalIgnoreCase) ?? false;

        var fileName = Path.GetFileNameWithoutExtension(document.FilePath) ?? string.Empty;
        var isFileNameAutoGenerated =
            fileName.Contains(".AssemblyAttributes", StringComparison.OrdinalIgnoreCase) ||
            fileName.Contains(".AssemblyInfo", StringComparison.OrdinalIgnoreCase) ||
            fileName.StartsWith("TemporaryGeneratedFile_", StringComparison.OrdinalIgnoreCase) ||
            fileName.EndsWith(".designer", StringComparison.OrdinalIgnoreCase) ||
            fileName.EndsWith(".generated", StringComparison.OrdinalIgnoreCase) ||
            fileName.EndsWith(".g", StringComparison.OrdinalIgnoreCase) ||
            fileName.EndsWith(".gi", StringComparison.OrdinalIgnoreCase);

        var isFileContentAutoGenerated = false;
        var root = document.GetSyntaxRootAsync().Result;
        if (root.HasLeadingTrivia)
        {
            var commentTrivias = root.GetLeadingTrivia().Where(t => t.IsCommentTrivia());
            foreach (var commentTrivia in commentTrivias)
            {
                var text = commentTrivia.ToString();
                if (text.Contains("autogenerated", StringComparison.OrdinalIgnoreCase) ||
                    text.Contains("auto-generated", StringComparison.OrdinalIgnoreCase))
                {
                    isFileContentAutoGenerated = true;
                    break;
                }
            }
        }

        return isFilePathAutoGenerated || isFileNameAutoGenerated || isFileContentAutoGenerated;
    }

    public static bool IsEntryPoint(
        this Document document)
    {
        return document.Name == "Program.cs";
    }

    public static SyntaxNode GetDocumentEditorRoot(
        this DocumentEditor documentEditor)
    {
        var root = documentEditor.OriginalRoot.ChildNodes().FirstOrDefault(
            obj => obj.IsKind(SyntaxKind.NamespaceDeclaration) || obj.IsKind(SyntaxKind.FileScopedNamespaceDeclaration)
        );
        root ??= documentEditor.OriginalRoot;
        return root;
    }
}
